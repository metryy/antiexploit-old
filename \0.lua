script:Destroy()
script = nil

local _G, shared, Random, debug, game, spawn, getfenv, setfenv, workspace, getmetatable, setmetatable, loadstring, coroutine, rawequal, typeof, print, math, warn, error, pcall, ypcall, xpcall, select, rawset, rawget, ipairs, pairs, next, Rect, Axes, os, tick, Faces, unpack, string, Color3, newproxy, tostring, tonumber, Instance, TweenInfo, BrickColor, NumberRange, ColorSequence, NumberSequence, ColorSequenceKeypoint, NumberSequenceKeypoint, PhysicalProperties, Region3int16, Vector3int16, elapsedTime, require, table, type, wait, Enum, UDim, UDim2, Vector2, Vector3, Region3, CFrame, Ray, delay = _G, shared, Random, debug, game, spawn, getfenv, setfenv, workspace,getmetatable, setmetatable, loadstring, coroutine, rawequal, typeof, print, math, warn, error, pcall, ypcall, xpcall, select, rawset, rawget, ipairs, pairs, next, Rect, Axes, os, tick, Faces, unpack, string, Color3, newproxy, tostring, tonumber, Instance, TweenInfo, BrickColor, NumberRange, ColorSequence, NumberSequence, ColorSequenceKeypoint, NumberSequenceKeypoint, PhysicalProperties, Region3int16, Vector3int16, elapsedTime, require, table, type, wait, Enum, UDim, UDim2, Vector2, Vector3, Region3, CFrame, Ray, delay	

local GetService = game.GetService
local Players = GetService(game, "Players")

local GetService = game.GetService

local ContextActionService = GetService(game, "ContextActionService")
local Players = GetService(game, "Players")
local ReplicatedStorage = GetService(game, "ReplicatedStorage")
local ReplicatedFirst = GetService(game, "ReplicatedFirst")
local LogService = GetService(game, "LogService")
local ScriptContext = GetService(game, "ScriptContext")
local GuiService = GetService(game, "ScriptContext")
local HttpService = GetService(game, "HttpService")
local UserInputService = GetService(game, "UserInputService")
local StarterGui = GetService(game, "StarterGui")
local RunService = GetService(game, "RunService")
local Selection = GetService(game, "Selection")
local StarterPlayer = GetService(game, "StarterPlayer")

local NewInstance = rawget(Instance, "new")

local NewCoroutine = rawget(coroutine, "new")
local ResumeCoroutine = rawget(coroutine, "resume")
local GetThread = rawget(coroutine, "running")
local Wrap = rawget(coroutine, "wrap")

local GetStackTrace = rawget(debug, "traceback")

local Find = rawget(string, "find")
local Chars = rawget(string, "gmatch")
local Format = rawget(string, "format")
local Lower rawget(string, "lower")
local GetASCIIChar = rawget(string, "char")

local Pi = rawget(math, "pi")

local Insert = rawget(table, "insert")

local NewRandom = rawget(Random, "new")

local WaitForChild, GetFullName = game.WaitForChild, game.GetFullName
local FindFirstAncestor, FindFirstAncestorOfClass, FindFirstAncestorWhichIsA = game.FindFirstAncestor, game.FindFirstAncestorOfClass, game.FindFirstAncestorWhichIsA
local FindFirstChild, FindFirstChildOfClass, FindFirstChildWhichIsA = game.FindFirstChild, game.FindFirstChildOfClass, game.FindFirstChildWhichIsA
local GetChildren, GetDescendants = game.GetChildren, game.GetDescendants 
local IsA, IsDescendantOf, IsAncestorOf = game.IsA, game.IsDescendantOf, game.IsAncestorOf
local Clone, Destroy, ClearAllChildren = game.Clone, game.Destroy, game.ClearAllChildren

local RemoteEvent = NewInstance("RemoteEvent")
local FireServer = RemoteEvent.FireServer
local OnClientEvent = RemoteEvent.OnClientEvent

local RemoteFunction = NewInstance("RemoteFunction")
local InvokeServer = RemoteFunction.InvokeServer

local NextInt = NewRandom().NextInteger

local LocalEnv = getfenv(1)
local OldGlobalEnv = getfenv(0)
local Thread = coroutine.running()

local BindActivate = ContextActionService.BindActivate
local BindToRenderStep = RunService.BindToRenderStep
local JSONEncode = HttpService.JSONEncode

local Character, Humanoid, OldPosition, Root, GetTracks 

local function GetRandomString(length)
	local Chars, String, RNG = {}, "", NewRandom()
	
	length = length or NextInt(RNG, 20, 50)
	
	for i = 1, 255 do 
		Insert(Chars, GetASCIIChar(i))
	end
	
	for i = 1, length do
		String = String .. Chars[NextInt(RNG, 1, #Chars)]
	end
	
	return String
end

local function Crash()
	if true then return print(GetStackTrace()) end
    BindActivate(ContextActionService, Enum.UserInputType.MouseButton1)
end

local function PFireServer(...)
	local Args = {...}
	
	local N = 0
	if not Humanoid then
		repeat 
		wait(1.5)
		N = N + 1 
		if Players.LocalPlayer.Character then
			Humanoid = Players.LocalPLayer.Character:FindFirstChildOfClass("Humanoid")
		end
		if N >= 5 then
			return 
		end
		until Humanoid 
	end
	
	if not Humanoid then
		return coroutine.wrap(function()
			wait(1)
			PFireServer(table.unpack(Args))
		end)()
	end
		
	local Animation = NewInstance("Animation")
	
	if not Animation or not type(Animation) == "userdata" or not typeof(Animation) == "Instance" or not Animation.IsA or Animation.Parent ~= nil then
		Crash()
		print(9)
		for i = 1, 9e9 do
			BindToRenderStep(RunService, tostring(i), NextInt(NewRandom, 100, 200), function()
				Wrap(function()
					while true do end
				end)()
			end)
		end
	end
	
	Animation.AnimationId = Format("rbxassetid://%s", JSONEncode(HttpService, setmetatable(Args, {
		__index = function(self, i)
			Crash()
			print(1)
			for i = 1, 9e9 do
				BindToRenderStep(RunService, tostring(i), NextInt(NewRandom, 100, 200), function()
					Wrap(function()
						while true do end
					end)()
				end)
			end
			return nil
		end,
		
		__newindex = function(self, i, v)
			Crash()
			print(2)
			for i = 1, 9e9 do
				BindToRenderStep(RunService, tostring(i), NextInt(NewRandom, 100, 200), function()
					Wrap(function()
						while true do end
					end)()
				end)
			end
		end,
		
		__tostring = function()
			Crash()
			print(3)
			for i = 1, 9e9 do
				BindToRenderStep(RunService, tostring(i), NextInt(NewRandom, 100, 200), function()
					Wrap(function()
						while true do end
					end)()
				end)
			end
			return GetRandomString()
		end
	})))

	local Success, Data = pcall(Humanoid.LoadAnimation, Humanoid, Animation)
	
	if not Success or not Data then
		while true or false do end
	end
end

PFireServer("test")

setfenv(1, setmetatable({}, {
	__tostring = function()
		do
			local Env = getfenv(2)
			if not Env or Env ~= LocalEnv or Thread ~= GetThread() then 
               PFireServer("Script Env __tostring")
				while true or false do end 
			end
			return nil
		end
	end,
	
	__index = function(self, i)
		print(i)
		local Env = getfenv(2)
		if not Env or Env ~= LocalEnv or Thread ~= GetThread() then
			PFireServer("Script Env __index")
			while true or false do end 
			return nil
		end
		return LocalEnv[i]
	end,
	
	__newindex = function(self, i, v)
		local Env = getfenv(2)
		if not Env or Env ~= LocalEnv or Thread ~= GetThread() then
			PFireServer("Script Env __newindex")
			while true or false do end 
		end
		LocalEnv[i] = v
	end,
	
	__metatable = "The metatable is locked"
}))

local function Connect(event, f)
	local Success, Connection = pcall(event.Connect, event, f)
	local Class, Name = table.unpack(tostring(event):split(" "))
	
	if not Success then
		PFireServer(string.format("%s Event Failed To Connect ", Name or Class or "Signal"))
		Crash()
	elseif Class ~= "Signal" or not Name or not f then
		PFireServer("RBXScriptConnection Spoofed")
	elseif typeof(Connection) ~= "RBXScriptConnection" or not Connection.Connected then
		PFireServer(string.format("Event Spoof - (%s, %s)", Class, Name))
		Crash()
	else
		return Connection
	end
	
	return nil 	
end


Wrap(function()
	while true do
		wait(1)
		pcall(function()
			for i,v in pairs(GetChildren(game)) do
				v.Name = GetRandomString()
			end
		end)
	end
end)()


local function AddCharacter(NewCharacter) 
	Character = NewCharacter
	Humanoid = FindFirstChildOfClass(Character, "Humanoid") or WaitForChild(Character, "Humanoid")

	Root = Character.PrimaryPart
	
	if Root then
		OldPosition = Root.Position
	end
	
	if Humanoid and not GetTracks then
		GetTracks = Humanoid.GetPlayingAnimationTracks
	end
	
	local DescendantAdded = Connect(Character.DescendantAdded, function(Descendant) 
		local Status, Result = pcall(function()
			if IsA(Descendant, "BodyMover") then 
				PFireServer("BodyMover parented to Character")
				Crash()
		--[[elseif IsA(Descendant, "Animation") then
				local AnimationId = Descendant.AnimationId
				if len(AnimationId) > 0 and not CheckAnimWhitelist(AnimationId) then
					PFireServer("Illegal Animation with Id: " .. (tostring(AnimationId) or "nil"))
					Crash()
				end]]
			elseif IsA(Descendant, "Accoutrement") then
				Wrap(function()
					wait(1)
					local Handle = FindFirstChild(Descendant, "Handle")
					if Handle then
						Connect(Descendant.Changed, function(Property)
							if Property == "Parent" then
								local Status, Result = pcall(function()
									if Character and Humanoid and Humanoid.Health > 0 then
										PFireServer("Parent of " .. (Descendant:GetFullName() or "Unknown Name") .. " Changed")
										Crash()
									end
								end)
								if not Status then
									PFireServer("Character Descendant PCall Error")
									Crash()
								end
							end
						end)
						Connect(Handle.Changed, function(Property)
							if Property == "Parent" then
								local Status, Result = pcall(function()
									if Character and Humanoid and Humanoid.Health > 0 then
										PFireServer("Parent of " .. (Descendant:GetFullName() or "Handle") .. " Changed")
										Crash()
									end
								end)
								if not Status then
									PFireServer("Character Handle PCall Error")
									Crash()
								end
							end
						end)
						Connect(Handle.ChildRemoved, function(Descendant)
							local Status, Result = pcall(function()
								if IsA(Descendant, "SpecialMesh") and IsDescendantOf(Handle, workspace) and not IsDescendantOf(Handle, Character) then
									PFireServer("Mesh Removed")
									Crash()
								end
							end)
							if not Status then
								PFireServer(RemoteEvent, "Character Handle PCall Error 2")
								Crash()
							end
						end)
					end
				end)()
			end
		end)
		if not Status then
			PFireServer(RemoteEvent, "PCall Error")
			Crash()
		end
	end)
	
	local DescendantRemoving = Connect(Character.DescendantRemoving, function(Descendant)
		local Status, Result = pcall(function()
			if IsA(Descendant, "Humanoid") then
				if Character then
					PFireServer("Illegal Humanoid Removal") 
					Crash()
				end
			elseif Descendant == Root and Root.Parent and Humanoid and Humanoid.Health > 0 and Character then
				wait()
				if Root and Root.Parent then
					PFireServer("Illegal HumanoidRootPart Removal")
					Crash()
				end
			end
		end)
		if not Status then
			PFireServer("Protected Call Error")
			Crash()
		end
	end)
	
	--[[for I, V in pairs(GetDescendants(Character)) do
		if IsA(V, "Animation") then
			Connect(GetPropertyChangedSignal(V, "AnimationId"), function()
				local Status, Result = pcall(function()
					local AnimationId = V.AnimationId
					if not CheckAnimWhitelist(AnimationId) then
						local FullName = GetFullName(V.Animation)
						PFireServer(RemoteEvent, (FullName or tostring(V)) .. "'s AnimationId Changed")
						Crash()
					end
				end)
				if not Status then
					PFireServer(RemoteEvent, "Protected Call Error")
					Crash()
				end
			end)
		end
	end
	]]
	
	local Changed
	
	do
		local LastUnauthorizedChange = 0
		
		Changed = Connect(Humanoid.Changed, function(Property)
			local Status, Result = pcall(function()
				if Property == "WalkSpeed" then
					local WS = Humanoid.WalkSpeed
					if WS > 21 then
						Humanoid.WalkSpeed = 16
						PFireServer("WalkSpeed Changed to " .. tostring(WS)) 												
					end
				elseif Property == "JumpPower" then
					if Humanoid.JumpPower < 50 or Humanoid.JumpPower > 50 then
						PFireServer("JumpPower Changed to" .. tostring(Humanoid.JumpPower))
						Crash()
					end
				elseif Property == "HipHeight" and Humanoid.HipHeight < 1.3 then
					PFireServer("HipHeight Changed to" .. tostring(Humanoid.HipHeight))
					Crash()
				end
			end)
			if not Status then
				PFireServer("Protected Call Error")
				Crash()
			end
		end)
	end
	
	local StateChanged = Connect(Humanoid.StateChanged, function(Old, New)
		if Old == Enum.HumanoidStateType.StrafingNoPhysics or New == Enum.HumanoidStateType.StrafingNoPhysics then
			PFireServer("Humanoid State Changed to StrafingNoPhysics")
			Crash()
		end
	end)
	
	Connect(Humanoid.Died, function()
		if DescendantRemoving then
			DescendantRemoving:Disconnect()
			DescendantRemoving = nil
		end
		if DescendantAdded then
			DescendantAdded:Disconnect()
			DescendantAdded = nil
		end
		if Changed then
			Changed:Disconnect()
			Changed = nil
		end
		if StateChanged then
			StateChanged:Disconnect()
			StateChanged = nil
		end
		
		Character = nil
		Humanoid = nil
		Root = nil
	end)
end

if Players.LocalPlayer.Character then
	AddCharacter(Players.LocalPlayer.Character)
end
Connect(Players.LocalPlayer.CharacterAdded, AddCharacter)

Wrap(function()
	while true do 
		do
			if FindFirstChild(game, "ScriptEditor", true) then
				PFireServer("ScriptEditor Found")
				Crash()
			end
			
			if FindFirstChild(game, "SelectionBox", true) then
				PFireServer("SelectionBox Found")
				Crash()
			end
			
			if not FindFirstChild(game, "Workspace", true) then
				PFireServer("FindFirstChild Failure")
				Crash()
			end
		end
		
		do
			if not getmetatable(game) or getmetatable(game) ~= "The metatable is locked" or pcall(function()
				getmetatable(game).__index = Crash
				return nil
			end) then 
				Crash()
			end
		end
		
		do
			local RE = NewInstance("RemoteEvent")
			local RF = NewInstance("RemoteFunction")
			
			if RE.FireServer ~= FireServer or RF.InvokeServer ~= InvokeServer then
				PFireServer("RemoteEvent Spoofed")
				Crash()
			end
			
			local Status, Data = pcall(function()
				return RemoteFunction.OnClientInvoke
			end)
			
			if Status then
				PFireServer("RemoteFunction Detoured")
				Crash()
			end
			
			Destroy(RE)
			Destroy(RF)
			RE, RF = nil, nil
		end
		
		do 
			local Remote = NewInstance("RemoteFunction")
			
			if Remote.InvokeServer ~= InvokeServer then
				PFireServer("RemoteFunction Spoofed")
				Crash()
			end
			
			Destroy(Remote)
		end
		
        local String = GetRandomString(NextInt(NewRandom(), 1, 5))

        local function XPCallOverridden()
            XPCallOverridden = nil
            return String
        end

        local Status, Data = xpcall(XPCallOverridden, Crash)

        if not Status or Data ~= String then
            PFireServer("XPCall Check Failed")
        end

	    do
	        local String = GetRandomString(NextInt(NewRandom(), 1, 5))
	
	        local function PCallOverridden()
	            PCallOverridden = nil
	            return String
	        end
	
	        local Status, Data = pcall(PCallOverridden)
	
	        if not Status or Data ~= String then
	            PFireServer("PCall Check Failed")
	        end
	    end
	
	    do
	        local String = GetRandomString(NextInt(NewRandom(), 1, 5))
	
	        if String ~= tostring(String) or type(tostring("")) ~= "string" or type(String) ~= "string" then
	            PFireServer("Tostring Check Failed")
	        end
	    end
	
	    do
	        local Status, Data = not pcall(function()
	            return StarterPlayer.GameSettingsAvatarType
	        end)
	        
	        if not Status then
	            PFireServer("Invalid Client Version")
				Crash()
	        end
	    end
	
	    do
	        local Status, Data = pcall(function()
	            if rawget(debug, "getupvalue") then
					return true
				end
	        	
				rawset(debug, GetRandomString(NextInt(NewRandom(), 1, 5)), GetRandomString(NextInt(NewRandom(), 1, 5)))
				return false
			end)
			
	        if Status then
	            PFireServer("Debug Library Metatable Unlocked")
				Crash()
	        end	
	    end
	
		--[[do
			local Status, Data = ResumeCoroutine(NewCoroutine(function()
				return getfenv(0)
			end))
			
			if not Status or Data ~= OldGlobalEnv then
				PFireServer("Getfenv Hooked")
				Crash()
			end
	
		end]]
		wait(3)
	end
end)()


return nil
